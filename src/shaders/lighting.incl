vec3 getAmbientLightColour(const AmbientLight ambientLight) {
    if(!ambientLight.isAmbientOn) { return vec3(0.0); }
    return ambientLight.color;
}

vec3 getDiffuseLightColour(const DiffuseLight diffuseLight, const vec3 normal) {
    float lightIntensity = max(0.0, dot(normal, -diffuseLight.direction));
    lightIntensity = clamp(lightIntensity * diffuseLight.factor, 0.0, 1.0);
    vec3 intensityByColor = diffuseLight.color * lightIntensity;
    return intensityByColor;
}

vec3 getPointLightColour(const PointLight pointLight, const vec3 worldPosition, const vec3 normal)
{
	vec3 positionToLightVector = worldPosition - pointLight.position;
	float distance = length(positionToLightVector);
	positionToLightVector = normalize(positionToLightVector);
	
	float diffuseFactor = max(0.0, dot(normal, -positionToLightVector));	
	float totalAttenuation = pointLight.constantAttenuation
		+ pointLight.linearAttenuation * distance
		+ pointLight.exponentialAttenuation * pow(distance, 2.0);

	return pointLight.color * (pointLight.ambientFactor + diffuseFactor) / totalAttenuation;
}

vec3 getSpecularMaterialLightColour(const DiffuseLight diffuseLight, const Material material, const vec3 worldPosition, const vec3 normal, const vec3 cameraPosition) {

    if(material.isMaterialOn) { return vec3(0.0); }
    vec3 reflectedVector = normalize(reflect(diffuseLight.direction, normal));
    vec3 worldTocameraVector = normalize(cameraPosition - worldPosition);
    float specularThreshold = dot(worldTocameraVector, reflectedVector);
    if(specularThreshold > 0) {
        specularThreshold = pow(specularThreshold, material.specularStrength);
        return diffuseLight.color * material.specularIntensity * specularThreshold;
    }
    return vec3(0.0);
}